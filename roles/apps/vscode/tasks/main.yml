---
# Visual Studio Code installation via official Microsoft repository

- name: Install dependencies for VSCode
  apt:
    name:
      - wget
      - gpg
      - apt-transport-https
    state: present
  become: yes
  when: app_states['vscode'] | default('present') == 'present'

- name: Remove conflicting VSCode repository files
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/apt/sources.list.d/vscode.list
    - /etc/apt/sources.list.d/vscode.sources
  become: yes
  when: app_states['vscode'] | default('present') == 'present'

- name: Remove conflicting Microsoft GPG keys
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /usr/share/keyrings/microsoft.gpg
    - /etc/apt/trusted.gpg.d/microsoft.gpg
  become: yes
  when: app_states['vscode'] | default('present') == 'present'

- name: Download Microsoft GPG key
  get_url:
    url: https://packages.microsoft.com/keys/microsoft.asc
    dest: /tmp/microsoft.asc
    mode: '0644'
  become: yes
  when: app_states['vscode'] | default('present') == 'present'

- name: Add Microsoft GPG key to keyrings
  shell: |
    gpg --dearmor < /tmp/microsoft.asc > /usr/share/keyrings/packages.microsoft.gpg
    chmod 644 /usr/share/keyrings/packages.microsoft.gpg
  args:
    creates: /usr/share/keyrings/packages.microsoft.gpg
  become: yes
  when: app_states['vscode'] | default('present') == 'present'

- name: Clean up temporary GPG key file
  file:
    path: /tmp/microsoft.asc
    state: absent
  become: yes
  when: app_states['vscode'] | default('present') == 'present'

- name: Add VSCode repository
  apt_repository:
    repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main"
    filename: vscode
    state: present
  become: yes
  when: app_states['vscode'] | default('present') == 'present'

- name: Flush handlers to ensure apt cache is updated
  meta: flush_handlers

- name: Install Visual Studio Code
  apt:
    name: code
    state: "{{ app_states['vscode'] | default('present') }}"
    update_cache: yes
  become: yes

# Install high-resolution icon in proper icon theme directory
# VSCode package installs 1024x1024 PNG to pixmaps, copy to hicolor theme
- name: Ensure hicolor 1024x1024 apps directory exists
  file:
    path: /usr/share/icons/hicolor/1024x1024/apps
    state: directory
    mode: '0755'
  become: yes
  when: app_states['vscode'] | default('present') == 'present'

- name: Copy VSCode icon to hicolor theme directory (1024x1024)
  copy:
    src: /usr/share/pixmaps/vscode.png
    dest: /usr/share/icons/hicolor/1024x1024/apps/vscode.png
    remote_src: yes
    mode: '0644'
  become: yes
  when: app_states['vscode'] | default('present') == 'present'

- name: Update icon cache for VSCode
  command: gtk-update-icon-cache -f -t /usr/share/icons/hicolor
  become: yes
  when: app_states['vscode'] | default('present') == 'present'
  ignore_errors: yes

# Fix keyring access on COSMIC Desktop (Chromium doesn't recognize COSMIC)
# Force VSCode to use gnome-libsecret for password storage + Wayland optimizations
- name: Create VSCode config directory
  file:
    path: "{{ user.home }}/.config/Code/User"
    state: directory
    owner: "{{ user.name }}"
    mode: '0755'
  when: app_states['vscode'] | default('present') == 'present'

- name: Create .vscode directory for argv.json
  file:
    path: "{{ user.home }}/.vscode"
    state: directory
    owner: "{{ user.name }}"
    mode: '0755'
  when: app_states['vscode'] | default('present') == 'present'

- name: Configure VSCode runtime arguments (argv.json)
  copy:
    content: |
      // This configuration file allows you to pass permanent command line arguments to VS Code.
      // Only a subset of arguments is currently supported to reduce the likelihood of breaking
      // the installation.
      //
      // PLEASE DO NOT CHANGE WITHOUT UNDERSTANDING THE IMPACT
      //
      // NOTE: Changing this file requires a restart of VS Code.
      {
        // Use software rendering instead of hardware accelerated rendering.
        // This can help in cases where you see rendering issues in VS Code.
        // "disable-hardware-acceleration": true,

        // Allows to disable crash reporting.
        // Should restart the app if the value is changed.
        "enable-crash-reporter": true,

        // Unique id used for correlating crash reports sent from this instance.
        // Do not edit this value.
        "crash-reporter-id": "{{ vscode_crash_reporter_id | default('e0987853-1544-4130-8f49-b10d7689f378') }}",

        // COSMIC Desktop compatibility - use GNOME keyring for password storage
        "password-store": "gnome-libsecret"
      }
    dest: "{{ user.home }}/.vscode/argv.json"
    owner: "{{ user.name }}"
    mode: '0644'
  when: app_states['vscode'] | default('present') == 'present'

- name: Configure VSCode Wayland flags (code-flags.conf)
  copy:
    content: |
      --enable-features=UseOzonePlatform,WaylandWindowDecorations
      --ozone-platform=wayland
    dest: "{{ user.home }}/.config/code-flags.conf"
    owner: "{{ user.name }}"
    mode: '0644'
  when: app_states['vscode'] | default('present') == 'present'

# COSMIC Theme Integration - VSIX Packaging Approach
# Generate themes in extras/themes/vscode, package as VSIX, then install

# Install vsce globally for packaging VSCode extensions
- name: Install vsce globally via npm
  shell: npm install -g @vscode/vsce
  become: yes
  when: app_states['vscode'] | default('present') == 'present'
  register: vsce_install
  failed_when: false
  changed_when: vsce_install.rc == 0

# Dark Theme Build Directory
- name: Create COSMIC Dark theme build directory
  file:
    path: "{{ playbook_dir }}/extras/themes/vscode/cosmic-theme-dark"
    state: directory
    mode: '0755'
  when: app_states['vscode'] | default('present') == 'present'

- name: Create COSMIC Dark theme themes subdirectory
  file:
    path: "{{ playbook_dir }}/extras/themes/vscode/cosmic-theme-dark/themes"
    state: directory
    mode: '0755'
  when: app_states['vscode'] | default('present') == 'present'

- name: Deploy COSMIC Dark theme package.json
  template:
    src: package.json.j2
    dest: "{{ playbook_dir }}/extras/themes/vscode/cosmic-theme-dark/package.json"
    mode: '0644'
  vars:
    mode: "Dark"
    is_dark: true
  when: app_states['vscode'] | default('present') == 'present'

- name: Deploy COSMIC Dark theme JSON
  template:
    src: cosmic-theme.json.j2
    dest: "{{ playbook_dir }}/extras/themes/vscode/cosmic-theme-dark/themes/cosmic-dark.json"
    mode: '0644'
  vars:
    mode: "Dark"
    is_dark: true
    colors: "{{ theme_colors_dark.colors }}"
  when: app_states['vscode'] | default('present') == 'present'

- name: Deploy COSMIC Dark theme .vscodeignore
  template:
    src: vscodeignore.j2
    dest: "{{ playbook_dir }}/extras/themes/vscode/cosmic-theme-dark/.vscodeignore"
    mode: '0644'
  when: app_states['vscode'] | default('present') == 'present'

# Light Theme Build Directory
- name: Create COSMIC Light theme build directory
  file:
    path: "{{ playbook_dir }}/extras/themes/vscode/cosmic-theme-light"
    state: directory
    mode: '0755'
  when: app_states['vscode'] | default('present') == 'present'

- name: Create COSMIC Light theme themes subdirectory
  file:
    path: "{{ playbook_dir }}/extras/themes/vscode/cosmic-theme-light/themes"
    state: directory
    mode: '0755'
  when: app_states['vscode'] | default('present') == 'present'

- name: Deploy COSMIC Light theme package.json
  template:
    src: package.json.j2
    dest: "{{ playbook_dir }}/extras/themes/vscode/cosmic-theme-light/package.json"
    mode: '0644'
  vars:
    mode: "Light"
    is_dark: false
  when: app_states['vscode'] | default('present') == 'present'

- name: Deploy COSMIC Light theme JSON
  template:
    src: cosmic-theme.json.j2
    dest: "{{ playbook_dir }}/extras/themes/vscode/cosmic-theme-light/themes/cosmic-light.json"
    mode: '0644'
  vars:
    mode: "Light"
    is_dark: false
    colors: "{{ theme_colors_light.colors }}"
  when: app_states['vscode'] | default('present') == 'present'

- name: Deploy COSMIC Light theme .vscodeignore
  template:
    src: vscodeignore.j2
    dest: "{{ playbook_dir }}/extras/themes/vscode/cosmic-theme-light/.vscodeignore"
    mode: '0644'
  when: app_states['vscode'] | default('present') == 'present'

# Package themes as VSIX files
- name: Package COSMIC Dark theme as VSIX
  shell: |
    cd "{{ playbook_dir }}/extras/themes/vscode/cosmic-theme-dark"
    vsce package --out "{{ playbook_dir }}/extras/themes/vscode/cosmic-theme-dark.vsix"
  when: app_states['vscode'] | default('present') == 'present'
  register: dark_vsix_package
  failed_when: dark_vsix_package.rc != 0

- name: Package COSMIC Light theme as VSIX
  shell: |
    cd "{{ playbook_dir }}/extras/themes/vscode/cosmic-theme-light"
    vsce package --out "{{ playbook_dir }}/extras/themes/vscode/cosmic-theme-light.vsix"
  when: app_states['vscode'] | default('present') == 'present'
  register: light_vsix_package
  failed_when: light_vsix_package.rc != 0

# Install VSIX files to VSCode
- name: Install COSMIC Dark theme VSIX
  become: yes
  become_user: "{{ user.name }}"
  shell: |
    code --install-extension "{{ playbook_dir }}/extras/themes/vscode/cosmic-theme-dark.vsix" --force
  when: app_states['vscode'] | default('present') == 'present'
  register: dark_vsix_install
  failed_when: false

- name: Install COSMIC Light theme VSIX
  become: yes
  become_user: "{{ user.name }}"
  shell: |
    code --install-extension "{{ playbook_dir }}/extras/themes/vscode/cosmic-theme-light.vsix" --force
  when: app_states['vscode'] | default('present') == 'present'
  register: light_vsix_install
  failed_when: false

# Clean up build directories (leave VSIX files for user)
- name: Remove COSMIC Dark theme build directory
  file:
    path: "{{ playbook_dir }}/extras/themes/vscode/cosmic-theme-dark"
    state: absent
  when: app_states['vscode'] | default('present') == 'present'

- name: Remove COSMIC Light theme build directory
  file:
    path: "{{ playbook_dir }}/extras/themes/vscode/cosmic-theme-light"
    state: absent
  when: app_states['vscode'] | default('present') == 'present'

# Remove old incorrectly-deployed theme directories
- name: Remove old COSMIC Dark theme directory (from direct deployment)
  file:
    path: "{{ user.home }}/.vscode/extensions/cosmic.cosmic-theme-dark-1.0.0"
    state: absent
  when: app_states['vscode'] | default('present') == 'present'

- name: Remove old COSMIC Light theme directory (from direct deployment)
  file:
    path: "{{ user.home }}/.vscode/extensions/cosmic.cosmic-theme-light-1.0.0"
    state: absent
  when: app_states['vscode'] | default('present') == 'present'

- name: Remove old COSMIC Dark theme directory (incorrect naming)
  file:
    path: "{{ user.home }}/.vscode/extensions/cosmic-theme-dark"
    state: absent
  when: app_states['vscode'] | default('present') == 'present'

- name: Remove old COSMIC Light theme directory (incorrect naming)
  file:
    path: "{{ user.home }}/.vscode/extensions/cosmic-theme-light"
    state: absent
  when: app_states['vscode'] | default('present') == 'present'

# Cleanup when absent
- name: Remove VSCode repository when absent
  apt_repository:
    repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main"
    filename: vscode
    state: absent
  become: yes
  when: app_states['vscode'] | default('present') == 'absent'

- name: Remove Microsoft GPG key when absent
  file:
    path: /usr/share/keyrings/packages.microsoft.gpg
    state: absent
  become: yes
  when: app_states['vscode'] | default('present') == 'absent'
