---
# Restic and Autorestic installation and configuration

- name: Install restic from apt
  apt:
    name: restic
    state: "{{ app_states.restic | default('present') }}"
  become: yes

- name: Check if autorestic is installed
  stat:
    path: /usr/local/bin/autorestic
  register: autorestic_installed

- name: Download autorestic installation script
  get_url:
    url: https://raw.githubusercontent.com/cupcakearmy/autorestic/master/install.sh
    dest: /tmp/autorestic-install.sh
    mode: '0755'
  when:
    - not autorestic_installed.stat.exists
    - app_states.restic | default('present') == 'present'

- name: Install autorestic
  shell: bash /tmp/autorestic-install.sh
  args:
    creates: ./autorestic
  when:
    - not autorestic_installed.stat.exists
    - app_states.restic | default('present') == 'present'
  register: autorestic_download

- name: Move autorestic to /usr/local/bin
  copy:
    src: "{{ ansible_env.PWD }}/autorestic"
    dest: /usr/local/bin/autorestic
    mode: '0755'
    remote_src: yes
  become: yes
  when:
    - autorestic_download is defined
    - autorestic_download.changed

- name: Remove installation script and downloaded binary
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /tmp/autorestic-install.sh
    - "{{ ansible_env.PWD }}/autorestic"
  when:
    - autorestic_download is defined
    - autorestic_download.changed

# Configuration deployment (when present)
- name: Create autorestic config directory
  file:
    path: "{{ user.home }}/.config/autorestic"
    state: directory
    owner: "{{ user.name }}"
    mode: '0755'
  when: app_states.restic | default('present') == 'present'

- name: Deploy autorestic configuration
  template:
    src: autorestic.yml.j2
    dest: "{{ user.home }}/.config/autorestic/autorestic.yml"
    owner: "{{ user.name }}"
    mode: '0600'
  when: app_states.restic | default('present') == 'present'

- name: Deploy autorestic exclude file
  template:
    src: autorestic-exclude.j2
    dest: "{{ user.home }}/.config/autorestic/exclude"
    owner: "{{ user.name }}"
    mode: '0644'
  when: app_states.restic | default('present') == 'present'

- name: Create autorestic log directory
  file:
    path: "{{ user.home }}/.local/share/autorestic"
    state: directory
    owner: "{{ user.name }}"
    mode: '0755'
  when: app_states.restic | default('present') == 'present'

# Deploy convenience scripts
- name: Deploy restic convenience scripts
  copy:
    src: "{{ item }}"
    dest: "{{ user.home }}/.local/bin/{{ item }}"
    owner: "{{ user.name }}"
    mode: '0755'
  loop:
    - restic-backup
    - restic-restore
    - restic-status
    - restic-list-files
    - restic-init
  when: app_states.restic | default('present') == 'present'

# Systemd service and timer (user-level)
- name: Create systemd user directory
  file:
    path: "{{ user.home }}/.config/systemd/user"
    state: directory
    owner: "{{ user.name }}"
    mode: '0755'
  when: app_states.restic | default('present') == 'present'

- name: Deploy systemd service unit
  template:
    src: autorestic-backup.service.j2
    dest: "{{ user.home }}/.config/systemd/user/autorestic-backup.service"
    owner: "{{ user.name }}"
    mode: '0644'
  when: app_states.restic | default('present') == 'present'
  register: systemd_service

- name: Deploy systemd timer unit
  template:
    src: autorestic-backup.timer.j2
    dest: "{{ user.home }}/.config/systemd/user/autorestic-backup.timer"
    owner: "{{ user.name }}"
    mode: '0644'
  when: app_states.restic | default('present') == 'present'
  register: systemd_timer

- name: Reload systemd user daemon
  systemd:
    daemon_reload: yes
    scope: user
  become: yes
  become_user: "{{ user.name }}"
  when:
    - app_states.restic | default('present') == 'present'
    - systemd_service.changed or systemd_timer.changed
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ ansible_facts['getent_passwd'][user.name][1] }}"

- name: Enable and start autorestic timer
  systemd:
    name: autorestic-backup.timer
    enabled: yes
    state: started
    scope: user
  become: yes
  become_user: "{{ user.name }}"
  when: app_states.restic | default('present') == 'present'
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ ansible_facts['getent_passwd'][user.name][1] }}"

# Cleanup when state is absent
- name: Stop and disable autorestic timer when state is absent
  systemd:
    name: autorestic-backup.timer
    enabled: no
    state: stopped
    scope: user
  become: yes
  become_user: "{{ user.name }}"
  when: app_states.restic | default('present') == 'absent'
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ ansible_facts['getent_passwd'][user.name][1] }}"
  failed_when: false

- name: Remove systemd units when state is absent
  file:
    path: "{{ user.home }}/.config/systemd/user/{{ item }}"
    state: absent
  loop:
    - autorestic-backup.service
    - autorestic-backup.timer
  when: app_states.restic | default('present') == 'absent'

- name: Remove autorestic when state is absent
  file:
    path: /usr/local/bin/autorestic
    state: absent
  become: yes
  when: app_states.restic | default('present') == 'absent'

- name: Remove autorestic configuration when state is absent
  file:
    path: "{{ user.home }}/.config/autorestic"
    state: absent
  when: app_states.restic | default('present') == 'absent'

- name: Remove restic scripts when state is absent
  file:
    path: "{{ user.home }}/.local/bin/{{ item }}"
    state: absent
  loop:
    - restic-backup
    - restic-restore
    - restic-status
    - restic-list-files
    - restic-init
  when: app_states.restic | default('present') == 'absent'
